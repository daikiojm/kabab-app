# プロジェクトガイドライン

アプリケーションの詳細な仕様、ペルソナ、画面構成、要件などについては README.md を参照してください。このファイルでは主に開発時のガイドラインや制約事項について記載しています。


## 技術スタック

- React Native (Expo)
- TypeScript
- React Navigation
- AsyncStorage
- React Native Elements (@rneui/base, @rneui/themed)
- React Native Bottom Sheet (@gorhom/bottom-sheet)
- Zod (フォームバリデーション)
- Volta (Node.js v22.14.0 および npm v11.1.0 のバージョン管理)

## アーキテクチャと設計パターン

### コンポーネント設計
- コンポーネントのロジックは最小限に抑える
- ビジネスロジックは再利用可能な hooks として分離する
- フォーム入力はボトムシートに配置し、メインビューでの配置は避ける
- すべてのユーザー入力に対して Zod によるバリデーションを実装する
- React Native のパフォーマンスベストプラクティスに従う

### コード構成
- コンポーネントと hooks は明確に分離する
- 関連するコンポーネントは機能別のディレクトリにグループ化する
- 定義されたスタイルシステムに従って一貫性を保つ
- TypeScript の strict モードのガイドラインに従う

## ドキュメント要件

### タスクログの必須化
- すべての開発タスクにおいて、タスクログの作成は必須
- タスクの規模や種類に関わらず、必ずタスクログを作成する
- タスクログは作業完了後ではなく、作業開始時から記録を始める
- 作業中に発生した問題や解決方法も含めて記録する

### タスクログの保存場所と形式
- タスクログは /docs/TASKLOG.md に時系列順で保存する
- 新しいタスクは既存のタスクログの末尾に追記する
- 各タスクは日付と明確な見出しで区切る
- 見出しは作業内容が分かる具体的な名前をつける
  - 例：コア機能の実装
  - 例：通知機能のバグ修正

### タスクログの記載内容
タスクログには以下の内容を必ず含める：
- 実装した機能の詳細
- 設計上の考慮事項と選択した実装方針の理由
- コミット内容と各コミットの目的
- 新規作成したファイルとその役割
- 発生した問題と解決方法
- 今後の課題や改善点
- レビュー時の指摘事項と対応内容（該当する場合）

### タスクログの更新ガイドライン
- タスクログの更新は適切なコミットメッセージとともにバージョン管理する
- 各タスクの記録は完結した形で記述し、後から見返しても理解できるようにする
- 関連するタスク間の参照を明確にし、変更の影響範囲を追跡可能にする

### その他のドキュメント要件
- 新機能や依存関係の追加時は README.md を更新する
- 技術的な決定事項は /docs ディレクトリに記録する
- ドキュメントは日本語で記述し、後から見返しても理解できるように詳細に記載する

## 開発基準

### Git コミットガイドライン
- Conventional Commits の仕様に従う
- コミットメッセージには必ずスコープを含める
- コミットメッセージは英語で記述する
- 形式：type(scope): message
- タスク完了時には必ずコミットを作成する
  - タスクの変更内容を適切にステージングする
  - タスクの目的や変更内容を明確に説明するコミットメッセージを作成する
  - タスクログの更新も同じコミットに含める
  - 複数の変更がある場合は、論理的なまとまりごとに分割してコミットする

### コード品質
- コミット前に Prettier を実行する
- TypeScript の厳密なチェックをパスする
- フォーム入力は Zod でバリデーションする
- 自己説明的なコードと明確な命名を心がける
- 型定義で極力、any を避ける

### ライブラリ管理
- 新規依存関係追加時はメンテナンス状況を確認する
- 新規依存関係は README.md に記録する
- 依存関係を最新に保つ
- Volta で Node.js と npm のバージョン管理を行う

## セキュリティ対策

### 機密データ
以下のファイルの読み取り・変更を禁止：
- .env ファイル
- 機密データを含む設定ファイル
- API キーやトークンを含むファイル

### ベストプラクティス
- AsyncStorage はローカルデータのみに使用する
- 適切な入力バリデーションを実装する
- React Native のセキュリティガイドラインに従う
- ログに機密データを含めない

## テスト基準

- フォームのバリデーションテストを実装する
- hooks は独立してテストする
- 適切なエラーハンドリングを確認する
- ナビゲーションフローをテストする

## UI/UX ガイドライン

- 親しみやすいインターフェースのために絵文字を活用する
- 背景色は白系を基調とする
- 可能な限り OS 標準の UI パターンを採用する
- インターフェースはシンプルで整理された状態を保つ
- メニューはボトムシートを使用する
- Notion や Zenn.dev のデザインを参考にする

## エラーハンドリング

- 適切なエラーバウンダリを実装する
- 一貫性のあるエラーメッセージを使用する
- エラーを適切にログ記録する
- ユーザーフレンドリーなエラーフィードバックを提供する

## パフォーマンスガイドライン

- コンポーネントの再レンダリングを最適化する
- 状態更新を最小限に抑える
- React Native のパフォーマンスベストプラクティスに従う
- バンドルサイズを監視・最適化する
