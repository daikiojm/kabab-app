# プロジェクトガイドライン

このファイルは Cline が従うべき技術的な実装ルールを定義しています。

## 技術スタック

- React Native (Expo)
- TypeScript
- React Navigation
- AsyncStorage
- React Native Elements (@rneui/base, @rneui/themed)
- React Native Bottom Sheet (@gorhom/bottom-sheet)
- Zod (フォームバリデーション)
- Volta (Node.js v22.14.0 および npm v11.1.0 のバージョン管理)

## アーキテクチャと設計パターン

### コンポーネント設計
- コンポーネントのロジックは最小限に抑える
- ビジネスロジックは再利用可能な hooks として分離する
- フォーム入力はボトムシートに配置し、メインビューでの配置は避ける
- すべてのユーザー入力に対して Zod によるバリデーションを実装する
- React Native のパフォーマンスベストプラクティスに従う

### コード構成
- コンポーネントと hooks は明確に分離する
- 関連するコンポーネントは機能別のディレクトリにグループ化する
- 定義されたスタイルシステムに従って一貫性を保つ
- TypeScript の strict モードのガイドラインに従う

## UI/UX ガイドライン

- 親しみやすいインターフェースのために絵文字を活用する
- 背景色は白系を基調とする
- 可能な限り OS 標準の UI パターンを採用する
- インターフェースはシンプルで整理された状態を保つ
- メニューはボトムシートを使用する
- Notion や Zenn.dev のデザインを参考にする
- 避けるべきデザイン：インドカレー屋さんのようなごちゃごちゃした感じ

### 将来の拡張性
- ローカルストレージを使用する際も、将来的なサーバサイド保存への移行を考慮した設計とする
- データモデルは拡張可能な構造を維持する
- コンポーネントの再利用性を重視し、データソースに依存しない設計を心がける

## エラーハンドリング

- 適切なエラーバウンダリを実装する
- 一貫性のあるエラーメッセージを使用する
- エラーを適切にログ記録する
- ユーザーフレンドリーなエラーフィードバックを提供する

## パフォーマンスガイドライン

- コンポーネントの再レンダリングを最適化する
- 状態更新を最小限に抑える
- React Native のパフォーマンスベストプラクティスに従う
- バンドルサイズを監視・最適化する

## コード品質

- コミット前に Prettier を実行する
- TypeScript の厳密なチェックをパスする
- フォーム入力は Zod でバリデーションする
- 自己説明的なコードと明確な命名を心がける
- 型定義で極力、any を避ける

## セキュリティ対策

### 機密データ
以下のファイルの読み取り・変更を禁止：
- .env ファイル
- 機密データを含む設定ファイル
- API キーやトークンを含むファイル

### ベストプラクティス
- AsyncStorage はローカルデータのみに使用する
- 適切な入力バリデーションを実装する
- React Native のセキュリティガイドラインに従う
- ログに機密データを含めない

## テスト基準

- フォームのバリデーションテストを実装する
- hooks は独立してテストする
- 適切なエラーハンドリングを確認する
- ナビゲーションフローをテストする

## コミットメッセージ

- Conventional Commits の規約に従う
  - https://www.conventionalcommits.org/ja/v1.0.0/
  - 形式: `<type>(<scope>): <description>`
  - type は変更の種類を表す（feat, fix, docs, style, refactor, test, chore など）
  - scope は変更の影響範囲を表す（必須）
  - description は変更内容を英語で簡潔に記述
- コミットメッセージは必ず英語で記載する
- 1つのコミットは1つの論理的な変更に対応させる
- コミットメッセージは現在形で記述する（例: "Add feature" not "Added feature"）

## 開発プロセス

### ライブラリ管理
- ライブラリ追加を伴う修正をする際には必ずライブラリの開発元ページを確認し、メンテナンス状況をチェックする
- 実装時に注意事項が生じた場合、新たに資料する技術スタックが追加された場合には README または docs/ ディレクトリ以下にドキュメントを追加する

## ドキュメンテーション

### タスクログ記録
- タスクログは `docs/TASKLOG.md` に時系列順で記録する
- 各タスクログには以下の情報を必ず含める：
  - 実装した機能の詳細な説明
  - 設計上の工夫と採用した技術的な解決策
  - 関連するコミットの一覧
  - 新規作成したファイルとその役割の説明
  - 今後の課題や改善点
  - 発生した技術的な問題と具体的な解決方法
- 記録は日本語で行い、後から参照した際に実装の意図や経緯が理解できるよう詳細に記述する
- タスクログの更新はコミットの一部として扱い、適切なコミットメッセージを付与する
- 過去のタスクログは省略せず、すべての履歴を保持する：
  - 実装の経緯や意思決定の過程を追跡可能にする
  - 類似の問題に対する過去の解決策を参照できるようにする
  - プロジェクトの進化の過程を記録として残す
